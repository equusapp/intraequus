# Script simple para subir EQUUS Accounting a GitHub
# Ejecutar este script despu√©s de instalar Git

Write-Host "üê¥ EQUUS Accounting - Deploy to GitHub" -ForegroundColor Green
Write-Host "=====================================" -ForegroundColor Green

# Verificar si Git est√° instalado
Write-Host "üîç Verificando Git..." -ForegroundColor Yellow
$gitInstalled = $false
try {
    $gitVersion = git --version 2>$null
    if ($gitVersion) {
        Write-Host "‚úÖ Git est√° instalado: $gitVersion" -ForegroundColor Green
        $gitInstalled = $true
    }
}
catch {
    Write-Host "‚ùå Git no est√° instalado" -ForegroundColor Red
}

if (-not $gitInstalled) {
    Write-Host "Por favor instala Git desde: https://git-scm.com/download/win" -ForegroundColor Yellow
    Write-Host "Despu√©s de instalar Git, ejecuta este script nuevamente." -ForegroundColor Yellow
    Read-Host "Presiona Enter para salir"
    exit 1
}

# Verificar si ya existe un repositorio Git
if (Test-Path ".git") {
    Write-Host "‚úÖ Repositorio Git ya existe" -ForegroundColor Green
} else {
    Write-Host "üìÅ Inicializando repositorio Git..." -ForegroundColor Yellow
    git init
    Write-Host "‚úÖ Repositorio Git inicializado" -ForegroundColor Green
}

# Configurar Git si es necesario
Write-Host "üîß Verificando configuraci√≥n de Git..." -ForegroundColor Yellow

$userName = ""
$userEmail = ""

try {
    $userName = git config --global user.name 2>$null
    $userEmail = git config --global user.email 2>$null
}
catch {
    # Si hay error, las variables quedan vac√≠as
}

if ([string]::IsNullOrEmpty($userName)) {
    $name = Read-Host "Introduce tu nombre para Git"
    git config --global user.name "$name"
    Write-Host "‚úÖ Nombre configurado: $name" -ForegroundColor Green
}

if ([string]::IsNullOrEmpty($userEmail)) {
    $email = Read-Host "Introduce tu email para Git"
    git config --global user.email "$email"
    Write-Host "‚úÖ Email configurado: $email" -ForegroundColor Green
}

# Verificar archivos importantes
Write-Host "üîç Verificando archivos del proyecto..." -ForegroundColor Yellow

$importantFiles = @("package.json", "README.md", ".gitignore", ".env.example")

foreach ($file in $importantFiles) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $file existe" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  $file no encontrado" -ForegroundColor Yellow
    }
}

# Verificar que .env.local no se suba
if (Test-Path ".env.local") {
    Write-Host "‚úÖ .env.local existe (ser√° ignorado por .gitignore)" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  .env.local no encontrado - cr√©alo antes de ejecutar la app" -ForegroundColor Yellow
}

# A√±adir archivos al staging
Write-Host "üì¶ A√±adiendo archivos al repositorio..." -ForegroundColor Yellow
git add .

# Mostrar estado
Write-Host "üìã Estado del repositorio:" -ForegroundColor Yellow
git status --short

# Crear commit inicial
Write-Host "üíæ Creando commit inicial..." -ForegroundColor Yellow

$commitMessage = "üöÄ Initial commit: EQUUS Accounting System

‚ú® Features:
‚Ä¢ Complete accounting system for equestrian centers
‚Ä¢ Next.js 14 + TypeScript + Supabase
‚Ä¢ Invoice management (issued/received)
‚Ä¢ Bank reconciliation
‚Ä¢ Expense tracking
‚Ä¢ Asset management
‚Ä¢ Contact management
‚Ä¢ Real-time dashboard
‚Ä¢ Modern UI with TailwindCSS + shadcn/ui

üîß Tech Stack:
‚Ä¢ Next.js 14 (App Router)
‚Ä¢ TypeScript
‚Ä¢ Supabase (Database + Auth)
‚Ä¢ TailwindCSS + shadcn/ui
‚Ä¢ Lucide React Icons

üéØ Ready for production deployment"

git commit -m $commitMessage

Write-Host "‚úÖ Commit inicial creado" -ForegroundColor Green

# Instrucciones para GitHub
Write-Host ""
Write-Host "üåê Pr√≥ximos pasos para subir a GitHub:" -ForegroundColor Cyan
Write-Host "=====================================" -ForegroundColor Cyan
Write-Host "1. Ve a https://github.com/new" -ForegroundColor White
Write-Host "2. Nombre del repositorio: equus-accounting" -ForegroundColor White
Write-Host "3. Descripci√≥n: Sistema contable completo para centros ecuestres" -ForegroundColor White
Write-Host "4. Selecciona 'Private' o 'Public' seg√∫n prefieras" -ForegroundColor White
Write-Host "5. NO marques 'Add a README file' (ya tenemos uno)" -ForegroundColor White
Write-Host "6. Haz clic en 'Create repository'" -ForegroundColor White
Write-Host ""
Write-Host "7. Despu√©s de crear el repositorio, ejecuta estos comandos:" -ForegroundColor Yellow
Write-Host "   git remote add origin https://github.com/TU_USUARIO/equus-accounting.git" -ForegroundColor White
Write-Host "   git branch -M main" -ForegroundColor White
Write-Host "   git push -u origin main" -ForegroundColor White
Write-Host ""

# Crear archivo con comandos
$gitCommands = @"
# Comandos para conectar con GitHub
# Reemplaza TU_USUARIO por tu nombre de usuario de GitHub

git remote add origin https://github.com/TU_USUARIO/equus-accounting.git
git branch -M main
git push -u origin main
"@

$gitCommands | Out-File -FilePath "github-commands.txt" -Encoding UTF8
Write-Host "üìÑ Comandos guardados en 'github-commands.txt'" -ForegroundColor Green

Write-Host ""
Write-Host "üéâ ¬°Proyecto listo para GitHub!" -ForegroundColor Green
Write-Host "Reemplaza 'TU_USUARIO' por tu nombre de usuario de GitHub" -ForegroundColor Yellow

Read-Host "Presiona Enter para continuar"
